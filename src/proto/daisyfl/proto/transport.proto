// Copyright 2020 Adap GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
// Modifications copyright 2024 Intelligence Systems Lab. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================

syntax = "proto3";

package daisyfl.proto;

service DaisyService {
  rpc Join(stream ClientMessage) returns (stream ServerMessage) {}
}

enum ErrorCode {
  OK = 0;
  FIT_NOT_IMPLEMENTED = 1;
  EVALUATE_NOT_IMPLEMENTED = 2;
  ROAMING_FAILED = 3;
}
message Status {
  ErrorCode error_code = 1;
  string message = 2;
}
message Parameters {
  repeated bytes tensors = 1;
  string tensor_type = 2;
}

message InnerList {
  repeated Element inner_list = 1;
}
message InnerMap {
  map<string, Element> inner_map = 1;
}
message InnerMapInt {
  map<int64, Element> inner_map_int = 1;
}
message Element {
  oneof element {
    double double = 1;
    // float float = 2;
    // int32 int32 = 3;
    // int64 int64 = 4;
    // uint32 uint32 = 5;
    // uint64 uint64 = 6;
    // sint32 sint32 = 7;
    sint64 sint64 = 8;
    // fixed32 fixed32 = 9;
    // fixed64 fixed64 = 10;
    // sfixed32 sfixed32 = 11;
    // sfixed64 sfixed64 = 12;
    bool bool = 13;
    string string = 14;
    bytes bytes = 15;
    InnerMap inner_map = 16;
    InnerMapInt inner_map_int = 17;
    InnerList inner_list = 18;
  }
}

message ServerMessage {
  message FitIns {
    Parameters parameters = 1;
    InnerMap config = 2;
  }
  message EvaluateIns {
    Parameters parameters = 1;
    InnerMap config = 2;
  }
  message ServerReceivedSignal {
    Status status = 1;
  }
  message ServerStatus {
    string status = 1;
  }
  oneof msg {
    FitIns fit_ins = 1;
    EvaluateIns evaluate_ins = 2;
    ServerReceivedSignal server_received_signal = 3;
    ServerStatus server_status = 4;
  }
}

message ClientMessage {
  message FitRes {
    Status status = 1;
    Parameters parameters = 2;
    InnerMap config = 3;
  }
  message EvaluateRes {
    Status status = 1;
    InnerMap config = 2;
  }
  message ClientStatus {
    string status = 1;
  }
  message ClientUploadingSignal {
    Status status = 1;
  }
  message ClientRoamingSignal {
    Status status = 1;
  }
  message RoamingTerminationSignal {
    Status status = 1;
  }
  message Shutdown {
    Status status = 1;
  }
  oneof msg {
    FitRes fit_res = 1;
    EvaluateRes evaluate_res = 2;
    ClientStatus client_status = 3;
    ClientUploadingSignal client_uploading_signal = 4;
    ClientRoamingSignal client_roaming_signal = 5;
    RoamingTerminationSignal roaming_termination_signal = 6;
    Shutdown shutdown = 7;
  }
}